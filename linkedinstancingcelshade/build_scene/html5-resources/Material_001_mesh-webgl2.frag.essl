#version 300 es
precision mediump float;
precision highp int;

uniform highp vec3 sunDir;
uniform bool receiveShadow;
uniform highp sampler2DShadow shadowMap;
uniform highp float shadowsBias;
uniform highp vec3 sunCol;
uniform highp float envmapStrength;

in highp vec3 wnormal;
in highp vec4 lightPos;
out highp vec4 fragColor;

highp float PCF(highp sampler2DShadow shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec3 _28 = vec3(uv + (vec2(-1.0) / smSize), compare);
    highp float result = texture(shadowMap_1, vec3(_28.xy, _28.z));
    highp vec3 _38 = vec3(uv + (vec2(-1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_38.xy, _38.z));
    highp vec3 _50 = vec3(uv + (vec2(-1.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_50.xy, _50.z));
    highp vec3 _61 = vec3(uv + (vec2(0.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_61.xy, _61.z));
    highp vec3 _69 = vec3(uv, compare);
    result += texture(shadowMap_1, vec3(_69.xy, _69.z));
    highp vec3 _80 = vec3(uv + (vec2(0.0, 1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_80.xy, _80.z));
    highp vec3 _91 = vec3(uv + (vec2(1.0, -1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_91.xy, _91.z));
    highp vec3 _102 = vec3(uv + (vec2(1.0, 0.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_102.xy, _102.z));
    highp vec3 _113 = vec3(uv + (vec2(1.0) / smSize), compare);
    result += texture(shadowMap_1, vec3(_113.xy, _113.z));
    return result / 9.0;
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp float visibility = 1.0;
    highp float dotNL = max(dot(n, sunDir), 0.0);
    bool _152;
    if (receiveShadow)
    {
        _152 = lightPos.w > 0.0;
    }
    else
    {
        _152 = receiveShadow;
    }
    if (_152)
    {
        highp vec3 lPos = lightPos.xyz / vec3(lightPos.w);
        visibility *= PCF(shadowMap, lPos.xy, lPos.z - shadowsBias, vec2(1024.0));
    }
    highp vec3 basecol = vec3(0.80000007152557373046875, 0.2688041031360626220703125, 0.008307459764182567596435546875);
    highp float roughness = 0.5;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.5;
    highp vec3 shade = basecol * vec3(0.0);
    highp vec3 direct = (mix(shade, basecol, vec3(step(0.5, dotNL))) * visibility) * sunCol;
    highp vec3 indirect = basecol * envmapStrength;
    fragColor = vec4(direct + indirect, 1.0);
    highp vec3 _221 = pow(fragColor.xyz, vec3(0.4545454680919647216796875));
    fragColor = vec4(_221.x, _221.y, _221.z, fragColor.w);
}


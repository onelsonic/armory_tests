#version 300 es
precision mediump float;
precision highp int;

uniform highp sampler2D ImageTexture;

in highp vec3 wnormal;
in highp vec2 texCoord;
out highp vec4 fragColor[2];

highp vec2 octahedronWrap(highp vec2 v)
{
    return (vec2(1.0) - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : (-1.0), (v.y >= 0.0) ? 1.0 : (-1.0));
}

highp float packFloatInt16(highp float f, uint i)
{
    return (0.06248569488525390625 * f) + (0.06250095367431640625 * float(i));
}

highp float packFloat2(highp float f1, highp float f2)
{
    return floor(f1 * 255.0) + min(f2, 0.9900000095367431640625);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec4 ImageTexture_texread_store = texture(ImageTexture, texCoord);
    highp vec3 _82 = pow(ImageTexture_texread_store.xyz, vec3(2.2000000476837158203125));
    ImageTexture_texread_store = vec4(_82.x, _82.y, _82.z, ImageTexture_texread_store.w);
    highp vec3 ImageTexture_Color_res = ImageTexture_texread_store.xyz;
    highp float SeparateRGB_G_res = ImageTexture_Color_res.y;
    highp float SeparateRGB_R_res = ImageTexture_Color_res.x;
    highp float Mix_fac = SeparateRGB_R_res;
    highp vec3 Mix_Color_res = mix(vec3(SeparateRGB_G_res), vec3(0.0, 0.0, 1.0), vec3(Mix_fac));
    highp float MixShader_fac = ((((Mix_Color_res.x * 0.300000011920928955078125) + (Mix_Color_res.y * 0.589999973773956298828125)) + (Mix_Color_res.z * 0.10999999940395355224609375)) / 3.0) * 2.5;
    highp float MixShader_fac_inv = 1.0 - MixShader_fac;
    n = Mix_Color_res;
    highp vec3 basecol = (Mix_Color_res * MixShader_fac_inv) + (vec3(0.800000011920928955078125) * MixShader_fac);
    highp float roughness = (0.5 * MixShader_fac_inv) + (0.0 * MixShader_fac);
    highp float metallic = (0.0 * MixShader_fac_inv) + (0.0 * MixShader_fac);
    highp float occlusion = (1.0 * MixShader_fac_inv) + (1.0 * MixShader_fac);
    highp float specular = (0.5 * MixShader_fac_inv) + (1.0 * MixShader_fac);
    highp float opacity = ((1.0 * MixShader_fac_inv) + (0.0 * MixShader_fac)) - 0.00019999999494757503271102905273438;
    if (opacity < 0.20000000298023223876953125)
    {
        discard;
    }
    n /= vec3((abs(n.x) + abs(n.y)) + abs(n.z));
    highp vec2 _194;
    if (n.z >= 0.0)
    {
        _194 = n.xy;
    }
    else
    {
        _194 = octahedronWrap(n.xy);
    }
    n = vec3(_194.x, _194.y, n.z);
    fragColor[0] = vec4(n.xy, roughness, packFloatInt16(metallic, 0u));
    fragColor[1] = vec4(basecol, packFloat2(occlusion, specular));
}


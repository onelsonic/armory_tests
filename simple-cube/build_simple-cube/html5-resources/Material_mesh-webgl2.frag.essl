#version 300 es
precision mediump float;
precision highp int;

uniform highp vec3 pointPos;
uniform highp vec2 lightProj;
uniform highp float pointBias;
uniform highp samplerCubeShadow shadowMapPoint[1];
uniform highp vec3 pointCol;
uniform highp float envmapStrength;

in highp vec3 wnormal;
in highp vec3 wposition;
out highp vec4 fragColor;

highp float lpToDepth(inout highp vec3 lp, highp vec2 lightProj_1)
{
    lp = abs(lp);
    highp float zcomp = max(lp.x, max(lp.y, lp.z));
    zcomp = lightProj_1.x - (lightProj_1.y / zcomp);
    return (zcomp * 0.5) + 0.5;
}

highp float attenuate(highp float dist)
{
    return 1.0 / (dist * dist);
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec3 basecol = vec3(0.800000011920928955078125);
    highp float roughness = 0.4000000059604644775390625;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.5;
    highp vec3 direct = vec3(0.0);
    highp float visibility = 1.0;
    highp vec3 ld = pointPos - wposition;
    highp vec3 l = normalize(ld);
    highp float dotNL = max(dot(n, l), 0.0);
    highp vec3 param = ld;
    highp float _89 = lpToDepth(param, lightProj);
    highp float compare = _89 - (pointBias * 1.5);
    highp vec4 _119 = vec4((-l) + ((n * pointBias) * 20.0), compare);
    visibility = texture(shadowMapPoint[0], vec4(_119.xyz, _119.w));
    direct += ((((basecol * dotNL) * pointCol) * attenuate(distance(wposition, pointPos))) * visibility);
    fragColor = vec4(direct + ((basecol * 0.5) * envmapStrength), 1.0);
    highp vec3 _154 = pow(fragColor.xyz, vec3(0.4545454680919647216796875));
    fragColor = vec4(_154.x, _154.y, _154.z, fragColor.w);
}

